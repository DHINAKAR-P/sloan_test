package geppetto.Sloan_test_1_10000.hnb.dao.mysql;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;



import geppetto.Sloan_test_1_10000.hnb.domain.core.People_test;
import geppetto.Sloan_test_1_10000.hnb.domain.core.GpUser;
import geppetto.Sloan_test_1_10000.hnb.dao.mysql.support.People_test.People_testMapper;
import geppetto.Sloan_test_1_10000.hnb.dao.mysql.support.People_test.People_testInsertMapper;
import geppetto.Sloan_test_1_10000.hnb.dao.mysql.support.People_test.People_testUpdateMapper;


/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Repository("Landing_pageDao")
public class Landing_pageDao   {

	private Log log = LogFactory.getLog(getClass());
	private DataSource dataSource;

	@Value("${people_test_search_for_update.sql}")
	private String people_test_search_for_update_sql;
	@Value("${update_people_test.sql}")
	private String update_people_test_sql;

	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

	private People_testUpdateMapper People_test_update_mapper;
	private People_testInsertMapper People_test_insert_mapper;

    @Resource(name="dataSource")
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;



    	this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
    	this.People_test_update_mapper = new People_testUpdateMapper(this.dataSource);
	    this.People_test_insert_mapper = new People_testInsertMapper(this.dataSource);
    }

    public DataSource getDataSource() {
        return dataSource;
    }

	//auths not ready at this time
	public People_test people_test_search_for_update(long id, GpUser user) throws Exception {


		try{
			MapSqlParameterSource parameters;
			parameters = new MapSqlParameterSource();

			parameters.addValue("id", id);

			People_testMapper the_mapper =   new People_testMapper();

			People_test the_People_test = (People_test)this.namedParameterJdbcTemplate.queryForObject(this.people_test_search_for_update_sql, parameters, the_mapper);
			if(the_People_test == null){
				throw new Exception("no People_test found");
			}

			return the_People_test;
		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed 

		}
		return null;



	}



	//auths not ready at this time
	public People_test update_people_test(People_test People_test, GpUser user) throws Exception {


		try{
			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.put("Id", People_test.get_Id());
			parameters.put("First_name", People_test.get_First_name());
			parameters.put("Last_name", People_test.get_Last_name());
			parameters.put("Organization_id", People_test.get_Organization_id());


			People_test_update_mapper.setSql(update_people_test_sql);
			People_test_update_mapper.updateByNamedParam(parameters);

			return People_test;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString()); 

		}
		return null;


	}



}