package geppetto.Sloan_test_1_10000.hnb.domain.core;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;



/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC </br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
public class GpAuthority extends GpBaseAuthority {


	/**
	*
	* For now this class is only used to make the compile succeed
	* and therefore it is not meant to be used - Dan Castillo 01/28/2015
	*
	*/


	private final Log logger = LogFactory.getLog(getClass());
	private long id;
	private String username;
	private String authority;


	public long getId() {
		return id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getAuthority() {
		return authority;
	}
	public void setAuthority(String authority) {
		this.authority = authority;
	}


	public boolean isPermitted(String authstring) {
		logger.debug("GpAuthority- In isPermitted " + " authstring is:" 
														+ authstring);
		logger.debug("GpAuthority- In isPermitted " + " this.authority is:" 
				+ this.authority);

		int roleNeeded = super.getRoleHierArchyPosition(authstring);

		if(roleNeeded <= super.getRoleHierArchyPosition(this.authority)) {
			logger.debug("GpAuthority- In isPermitted " + "return code is: true");
			return true;
		}
		logger.debug("GpAuthority- In isPermitted " + "return code is: false");
		return false;
	}


}